pragma solidity ^0.8.0;

contract VulnerableSignature {
    mapping(bytes => bool) public processedSignatures;

    function execute(bytes32 _hash, bytes memory _signature) public {
        address signer = recoverSigner(_hash, _signature);
        require(signer == address(0xSomeTrustedAddress), "Invalid signer");

        // Do something (e.g., transfer funds, change settings)

        processedSignatures[_hash] = true;
    }

    function recoverSigner(bytes32 _hash, bytes memory _signature) internal pure returns (address) {
        // ... logic to recover the signer from the signature ...
    }
}

contract FixedSignature {
    mapping(address => uint256) public nonces;

    function execute(bytes32 _hash, bytes memory _signature) public {
        bytes32 uniqueHash = keccak256(abi.encodePacked(address(this), nonces[msg.sender], _hash));

        address signer = recoverSigner(uniqueHash, _signature);
        require(signer == address(0xbed), "Invalid signer");

        nonces[msg.sender] += 1;

        // Do something (e.g., transfer funds, change settings)
    }

    function recoverSigner(bytes32 _hash, bytes memory _signature) internal pure returns (address) {
        // ... logic to recover the signer from the signature ...
    }
}