pragma solidity ^0.8.0;

import "@openzeppelin/contracts/math/SafeMath.sol";

contract LossOfPrecision {
    function divide(uint256 a, uint256 b) public pure returns (uint256) {
        return a / b;  // Potential loss of precision
    }
}

contract HandlePrecision {
    using SafeMath for uint256;

    uint256 constant SCALING_FACTOR = 1e18;  // Scaling by 18 decimals, similar to how Ether is represented in Wei

    function divide(uint256 a, uint256 b) public pure returns (uint256) {
        uint256 scaledA = a.mul(SCALING_FACTOR);
        return scaledA.div(b);  // Result is scaled by SCALING_FACTOR
    }
}